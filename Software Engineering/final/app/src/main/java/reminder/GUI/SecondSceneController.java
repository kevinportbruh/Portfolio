package reminder.GUI;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import javafx.scene.Node;

import reminder.Interfaces.TrayManger;
import reminder.Interfaces.ConstantsInterface;
import reminder.backbone.Controller;
import reminder.backbone.Reminder;

import java.util.*;
import java.util.stream.Collectors;

import java.awt.TrayIcon;



/*
 * Where the magic happens
 * 
 * This class will control the second scene of the GUI
 * this is the main scene and place the user interacts with the program
 * The skeleton was generated by SceneBuilder and I modified it to fit our needs.
 * This screen will play out like this
 * 1. the user will click the "Show Events" button
 * 2. the program will parse the .ics file and print the events to the text area these events will be labeled with a number and have checkbox
 * 3. the user will select the events they want to be reminded for and enter the number of days before the event they want to be reminded
 * 4. the user will click the "create Reminder" button
 * 5. the user can click the "Remove all but Reminders" button to remove all the original events from the .ics file
 * 6. the user can click the "Reset .ICS events to original" button to reset the .ics file to its original state
 * 
 * 7. the user can FINALLY chose to export the .ics which will export the .ics to their desktop and ask if they want desktop notifications
 * (NOTE MUST HAVE FOCUSED MODE DISABLED FOR NOTIFICATIONS TO WORK)
 * if they choose to get desktop notifications the program will be minimized to the system tray and run till all reminders have been served
 * after all reminders have been served the program will exit
 *
 * @author Kevin Portillo self-proclaimed coding wizard ðŸ§™
 */
public class SecondSceneController implements TrayManger, ConstantsInterface{
    
    private Controller c1; // logic controller not scene controller
    private ObservableList<String>  detailsList  = FXCollections.observableArrayList();// the details that are pritned in the text area
    private ObservableList<String>  reminderDetails  = FXCollections.observableArrayList();// the details that are pritned in the text area
    private ObservableList<String>  fullDesc; // the full description of the all the events 

    @FXML
    private TextArea DetailsPrintArea;

    @FXML
    private AnchorPane InteractionPane;

    @FXML
    private AnchorPane PrintPane;

    @FXML
    private Label reminderViewLabel;

    @FXML
    private Label dupeReminderError;

    @FXML
    private Button exportICSButton;

    @FXML
    private ListView<CheckBox> listView;
    
    @FXML
    private ListView<HBox> reminderView;
    @FXML
    private Button createReminderButton;
    @FXML
    private Button printAllEvents;// correlates to "add reminder button" in gui
    @FXML
    private Button printOgEvents;// correlates to the button "Show Events" and "Reset .ICS events to original" in gui
    private boolean printOgClicked = false;

    @FXML
    private Button printReminderEvents;// correlates to "Remove all but Reminders" in gui
    @FXML
    private TextArea reminderDetsArea;



 
    @FXML
    void createReminderClicked(MouseEvent event) {
        //System.out.println("create reminder clicked");

        //now for each of the items in the reminder view we need to create a reminder
        //get each event #, and the number of days before the event to be reminded for everyhing in the reminder view
        //this could be helper method.

        for(HBox h:  reminderView.getItems()){
            TextField tf = (TextField) h.getChildren().get(1);
            CheckBox cb = (CheckBox) h.getChildren().get(0);

            int eveNum = Integer.parseInt(cb.getText().charAt(17)+"");
            int daysBefore = Integer.parseInt(tf.getText());
            
            //create reminder and print details in the reminderDetsArea ()
            //first check if r1 is a duplicate. if so then just print hello world rn
            Reminder r1 = c1.createReminder(eveNum, daysBefore);
            //System.out.println(c1.isDuplicateReminder(r1));

            if(c1.isDuplicateReminder(r1)){
                //System.out.println("duplicate reminder");
                
                //make duperemindererror red and fade out
                dupeReminderError.setVisible(true);
                dupeReminderError.setStyle("-fx-text-fill: red;");
                  FadeTransition fade = new FadeTransition();
                    fade.setDuration(javafx.util.Duration.seconds(5));
                    fade.setNode(dupeReminderError);
                    fade.setFromValue(1);
                    fade.setToValue(0);
                    fade.play();
               /////
                
            }else{
                c1.addReminderToList(r1);
                c1.addReminderToIcs(r1); 
            }
        }
        
        //now print the details of the reminder in the reminderDetsArea
        reminderDetsArea.clear();
        reminderDetsArea.appendText("Reminder Details: \n");
        
        reminderDetails.clear();
        for(String s:c1.getDetailsListFromCalendarData(PRINTREMINDER)){
            reminderDetails.add(s + suffixStr);
            //System.out.println(s+suffixStr);
        }
        String formattedText = formatStream(reminderDetails); // Remove brackets and commas 
        reminderDetsArea.appendText(formattedText);
        printAllEvents.setDisable(false);


       
    }

    @FXML
    void exportIcsButton(MouseEvent event) {
        //this button will eventually bring popup asking if they just want to export the .ics events 
        //or if they want to get desktop notifications
       // System.out.println(c1.getCalanderData().getEvents().size() + " " + c1.getCalanderData().getReminderEvents().size());
        //this is the confirmation alert.
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.initStyle(StageStyle.UTILITY);
        alert.setTitle("Export Options");
        alert.setHeaderText("Your .ics file will be exported to your desktop\n"
            +"Would you like to also recive desktop notifications?\n"
            + "(The program will be minimized to the System Tray and run till all reminders have been served!)");
        
        // 3 Buttons
        ButtonType buttonTypeExportOnly = new ButtonType("Export Only");
        ButtonType buttonTypeExportAndMinimize = new ButtonType("Export and Minimize");
        ButtonType buttonTypeCancel = new ButtonType("Cancel");

        alert.getButtonTypes().setAll(buttonTypeExportOnly, buttonTypeExportAndMinimize, buttonTypeCancel);
        Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
        stage.setAlwaysOnTop(true);
        String home = System.getProperty("user.home");
        alert.showAndWait().ifPresent(result -> {
            if (result == buttonTypeExportOnly) {
                // Export only
                c1.exportCalender(home+"/Desktop/");
                Platform.exit();
            } else if (result == buttonTypeExportAndMinimize) {
                // they want desktop notis
                c1.exportCalender(home+"/Desktop/");
                //minimize the program to the system tray
                TrayManger.createTray();
                TrayManger.trayIcon.displayMessage(TrayManger.TITLE, TrayManger.HELLO, TrayIcon.MessageType.INFO);
                c1.startReminders(actualRun); // start the reminders, calls static method in ReminderManagerInterface

                Stage primaryStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
                primaryStage.setIconified(true);
                primaryStage.hide();
            }
            // If the user clicks Cancel, do nothing
        });

        ////   
    }   


    /**
     * these methods are the print buttons, they will print the events to the text area
     * (the buttons are as labeled, and the text are is the textArea in the detials pane)
     * @param event
     */
    @FXML
    void printAClicked(MouseEvent event) {
        //System.out.println("print a clicked");
        
        //clear the text area && clear the details list
        DetailsPrintArea.clear();
        detailsList.clear();     //clear the list view and reminder view
        listView.getItems().clear();
        reminderView.getItems().clear();
        ArrayList<CheckBox> checkBoxes = setupListView(PRINTALL);
        // Set the ListView to display CheckBoxes
        listView.getItems().setAll(checkBoxes);
        // Optional: Handle checkbox events
        for (CheckBox checkBox : checkBoxes) {
            checkBox.setOnAction(e -> handleCheckboxClicked(checkBox));
        }

        printReminderEvents.setDisable(false);
        exportICSButton.setDisable(false);
    }

    @FXML
    void printOgClicked(MouseEvent event) {
        //System.out.println("print OG clicked");
   
        //prints the original events that were in the .ICS,  
        if(printOgClicked){
            //create an alert to confirm that they want to reset the events
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.initStyle(StageStyle.UTILITY);
            alert.setTitle("Are you sure?");
            alert.setHeaderText("Are you sure that you want to reset your current .ics back to its original state?");
            ButtonType buttonTypeReset = new ButtonType("Reset");
            ButtonType buttonTypeCancel = new ButtonType("Cancel");
            alert.getButtonTypes().setAll(buttonTypeReset, buttonTypeCancel);
    
            Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
            stage.setAlwaysOnTop(true);
            alert.showAndWait().ifPresent(result ->{
                if(result == buttonTypeReset){
                    c1.nukeAllReminders();
                    resetToOGHelper(); // reset the events to the original events
                    exportICSButton.setDisable(true);
                    printAllEvents.setDisable(true);
                    printReminderEvents.setDisable(true);
                    createReminderButton.setDisable(true);
                  
                    
                }
                // If the user clicks Cancel, do nothing
            });
            
        }else{
            resetToOGHelper(); // 'show events' 
            printOgEvents.setText("Reset .ICS events to original");
            printOgClicked = true;
        }
       

    }
    //create an alert to confirm that they want to reset the events
    private void resetToOGHelper(){
        ///
        c1.populateEvents();
        System.out.println( c1.getCalanderData().getEvents().size());// should be 0
        //clear the text area
       
       
        //clear the list view and reminder view
        listView.getItems().clear();
        detailsList.clear();
        DetailsPrintArea.clear();

        reminderView.getItems().clear();
        reminderDetsArea.clear();
        ArrayList<CheckBox> checkBoxes = setupListView(0);
        // Set the ListView to display CheckBoxes
        listView.getItems().setAll(checkBoxes);
        // Optional: Handle checkbox events
        for (CheckBox checkBox : checkBoxes) {
            checkBox.setOnAction(e ->{
                handleCheckboxClicked(checkBox);
                
            });
        }
      
    }


    @FXML
    void printRemClicked(MouseEvent event) {
        //System.out.println("print rem clicked");
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.initStyle(StageStyle.UTILITY);
            alert.setTitle("Are you sure?");
            alert.setHeaderText("Are you sure you want to clear all original events from the .ics file?\n"
            + "This will remove all Original events from the .ics file and only leave the reminders");
        ButtonType buttonTypeReset = new ButtonType("Continue");
        ButtonType buttonTypeCancel = new ButtonType("Cancel");
        alert.getButtonTypes().setAll(buttonTypeReset, buttonTypeCancel);

        Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
        stage.setAlwaysOnTop(true);
        alert.showAndWait().ifPresent(result ->{
            if(result == buttonTypeReset){
                c1.nukeOgEvents();
                printRemClickedHelper();
            }
            // If the user clicks Cancel, do nothing
        });



        

      
    
    }

    private void printRemClickedHelper(){
        //clear the text area
        DetailsPrintArea.clear();
        ArrayList<CheckBox> checkBoxes = setupListView(PRINTREMINDER);
        // Set the ListView to display CheckBoxes
       listView.getItems().setAll(checkBoxes);
      
        // Optional: Handle checkbox events
        for (CheckBox checkBox : checkBoxes) {
            checkBox.setOnAction(e -> handleCheckboxClicked(checkBox));
        }
    }
    //end printing methods

    //helper method for setting up the list view
    private ArrayList<CheckBox> setupListView(int printT) {
        ArrayList<CheckBox> checkBoxes = new ArrayList<CheckBox>();
        ObservableList<String> items = FXCollections.observableArrayList(c1.getDetailsListFromCalendarData(printT));
        this.fullDesc = items;// these are the full descriptions of the events
        //shorten the string to just event # x in the list view
        for (String item : items) {
            item = item.substring(0, 18);
            //System.out.println(item);
            CheckBox checkBox = new CheckBox(item);

            if(item.contains("Reminder")){
                checkBox.setDisable(true);
            }  
            checkBoxes.add(checkBox);
        
        
        }
        return checkBoxes;
    }

    //helper method for setting up the reminder view
    public void passData(Controller controller){
        this.c1 = controller;
       
    }

    // Method handles the checkbox clicks 
    private void handleCheckboxClicked(CheckBox checkBox) {
        String selectedItem = checkBox.getText();     
        if (checkBox.isSelected()) {
            // Add the item to detailsList
            if(!selectedItem.contains("Reminder")){
                detailsList.add(getDetsFromSelected(selectedItem) + suffixStr);
            }
           

            // Create an HBox with the CheckBox, TextField
            TextField textField = new TextField();
            textField.setPromptText("Enter the number of days before the event to be reminded");
            textField.setDisable(false);

            HBox layout = new HBox(checkBox, textField);
            layout.setSpacing(10); // Set spacing between components to 10px
            // Add the layout to the reminderView
            reminderView.getItems().add(layout);
            // Logic that enables the create reminder button when the user enters valid input
            textField.setOnKeyTyped(e -> {
                // Check all text fields to see if they are valid
                boolean allValid = true;
                for (HBox hb : reminderView.getItems()) {
                    TextField tf = (TextField) hb.getChildren().get(1);
                    if (!tf.getText().matches("[0-9]+")) {
                        allValid = false;
                        break;
                    }
                }
                createReminderButton.setDisable(!allValid);
            });
            // End logic
            listView.getItems().remove(checkBox);
        } else {
            // Remove the item from detailsList
            detailsList.remove(getDetsFromSelected(selectedItem)+suffixStr);

            //remove the corresponding layout from the reminderView
            reminderView.getItems().removeIf(item -> {
                CheckBox cb = (CheckBox) item.getChildren().get(0);
                return cb.getText().equals(checkBox.getText());
            });

            // Move the item back to the listView
            listView.getItems().add(checkBox);
            
            //  enable the checkbox in the listView
            checkBox.setDisable(false);
        }
        // Concatenate detailsList items without brackets and commas
        String formattedText = formatStream(detailsList); // Remove brackets and commas
        // Bind detailsList to the TextArea
        DetailsPrintArea.textProperty().bind(Bindings.createStringBinding(() -> formattedText));        
        if (!detailsList.isEmpty()) {
            reminderViewLabel.setVisible(true);
            reminderView.setDisable(false);
        } else {
           reminderViewLabel.setVisible(false);
            reminderView.setDisable(true);
            createReminderButton.setDisable(true);
        }
    }

    //helper method for getting the full description from the selected item
    private String getDetsFromSelected(String x){
        //given a string match up the first 18 digits if they match show the full description
        String ret = "";
        for(String s: fullDesc){
            if(s.substring(0, 18).equals(x)){
                ret = s;
            }
        }
        return ret;
    }
    //helper method for formatting a details list
    private String formatStream(ObservableList<String> list){
        return list.stream()
                .collect(Collectors.joining())
                .replaceAll("[\\[\\],]", ""); // Remove brackets and commas
    }
    
}


